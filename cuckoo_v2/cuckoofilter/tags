!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/9fcdb065/
$(ALIB)	Makefile	/^$(ALIB): $(LIBOBJECTS)$/;"	t
%.exe	benchmarks/Makefile	/^%.exe: %.cc ${HEADERS} ${SRC} Makefile$/;"	t
%.o	Makefile	/^%.o: %.cc ${HEADERS} Makefile$/;"	t
ALIB	Makefile	/^ALIB = libcuckoofilter.a$/;"	m
API	README.md	/^API$/;"	s
Add	benchmarks/bulk-insert-and-query.cc	/^  static void Add(uint64_t key, Table * table) {$/;"	f	typeref:typename:void	file:
Add	src/cuckoofilter.h	/^Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Add($/;"	f	class:cuckoofilter::CuckooFilter	typeref:typename:Status
Add	src/simd-block.h	/^SimdBlockFilter<HashFamily>::Add(const uint64_t key) noexcept {$/;"	f	class:SimdBlockFilter	typeref:typename:[[gnu::always_inline]]void
AddImpl	src/cuckoofilter.h	/^Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::AddImpl($/;"	f	class:cuckoofilter::CuckooFilter	typeref:typename:Status
AltIndex	src/cuckoofilter.h	/^  inline size_t AltIndex(const size_t index, const uint32_t tag) const {$/;"	f	class:cuckoofilter::CuckooFilter	typeref:typename:size_t
Authors	README.md	/^Authors$/;"	s
BINS	benchmarks/Makefile	/^BINS = conext-table3.exe conext-figure5.exe bulk-insert-and-query.exe$/;"	m
BitsPerItem	src/cuckoofilter.h	/^  double BitsPerItem() const { return 8.0 * table_->SizeInBytes() \/ Size(); }$/;"	f	class:cuckoofilter::CuckooFilter	typeref:typename:double
BobHash	src/hashutil.cc	/^uint32_t HashUtil::BobHash(const std::string &s, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil	typeref:typename:uint32_t
BobHash	src/hashutil.cc	/^uint32_t HashUtil::BobHash(const void *buf, size_t length, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil	typeref:typename:uint32_t
BobHash	src/hashutil.cc	/^void HashUtil::BobHash(const std::string &s, uint32_t *idx1, uint32_t *idx2) {$/;"	f	class:cuckoofilter::HashUtil	typeref:typename:void
BobHash	src/hashutil.cc	/^void HashUtil::BobHash(const void *buf, size_t length, uint32_t *idx1,$/;"	f	class:cuckoofilter::HashUtil	typeref:typename:void
Bucket	src/simd-block.h	/^  using Bucket = uint32_t[8];$/;"	t	class:SimdBlockFilter	typeref:typename:uint32_t[8]
Bucket	src/singletable.h	/^  struct Bucket {$/;"	s	class:cuckoofilter::SingleTable
Build	README.md	/^Build$/;"	s
CC	Makefile	/^CC = g++$/;"	m
CUCKOO_FILTER_BITS_H_	src/bitsutil.h	/^#define CUCKOO_FILTER_BITS_H_$/;"	d
CUCKOO_FILTER_CUCKOO_FILTER_H_	src/cuckoofilter.h	/^#define CUCKOO_FILTER_CUCKOO_FILTER_H_$/;"	d
CUCKOO_FILTER_DEBUG_H_	src/debug.h	/^#define CUCKOO_FILTER_DEBUG_H_$/;"	d
CUCKOO_FILTER_HASHUTIL_H_	src/hashutil.h	/^#define CUCKOO_FILTER_HASHUTIL_H_$/;"	d
CUCKOO_FILTER_PACKED_TABLE_H_	src/packedtable.h	/^#define CUCKOO_FILTER_PACKED_TABLE_H_$/;"	d
CUCKOO_FILTER_PERM_ENCODING_H_	src/permencoding.h	/^#define CUCKOO_FILTER_PERM_ENCODING_H_$/;"	d
CUCKOO_FILTER_PRINTUTIL_H_	src/printutil.h	/^#define CUCKOO_FILTER_PRINTUTIL_H_$/;"	d
CUCKOO_FILTER_SINGLE_TABLE_H_	src/singletable.h	/^#define CUCKOO_FILTER_SINGLE_TABLE_H_$/;"	d
ConstructFromAddCount	benchmarks/bulk-insert-and-query.cc	/^  static Table ConstructFromAddCount(size_t add_count) { return Table(add_count); }$/;"	f	typeref:typename:Table	file:
Contain	benchmarks/bulk-insert-and-query.cc	/^  static bool Contain(uint64_t key, const Table * table) {$/;"	f	typeref:typename:bool	file:
Contain	src/cuckoofilter.h	/^Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Contain($/;"	f	class:cuckoofilter::CuckooFilter	typeref:typename:Status
Contributing	README.md	/^Contributing$/;"	s
Cuckoo Filter	README.md	/^Cuckoo Filter$/;"	c
CuckooBenchmark	benchmarks/conext-figure5.cc	/^array<double, 5> CuckooBenchmark($/;"	f	typeref:typename:array<double,5>
CuckooBenchmark	benchmarks/conext-table3.cc	/^Metrics CuckooBenchmark(size_t add_count, const vector<uint64_t>& input) {$/;"	f	typeref:typename:Metrics
CuckooFilter	src/cuckoofilter.h	/^  explicit CuckooFilter(const size_t max_num_keys) : num_items_(0), victim_(), hasher_() {$/;"	f	class:cuckoofilter::CuckooFilter
CuckooFilter	src/cuckoofilter.h	/^class CuckooFilter {$/;"	c	namespace:cuckoofilter
DEBUG_ALL	src/debug.h	/^#define DEBUG_ALL /;"	d
DEBUG_CUCKOO	src/debug.h	/^#define DEBUG_CUCKOO /;"	d
DEBUG_ENCODE	src/debug.h	/^#define DEBUG_ENCODE /;"	d
DEBUG_ERRS	src/debug.h	/^#define DEBUG_ERRS /;"	d
DEBUG_NONE	src/debug.h	/^#define DEBUG_NONE /;"	d
DEBUG_PERROR	src/debug.h	/^#define DEBUG_PERROR(/;"	d
DEBUG_TABLE	src/debug.h	/^#define DEBUG_TABLE /;"	d
DPRINTF	src/debug.h	/^#define DPRINTF(/;"	d
Delete	src/cuckoofilter.h	/^Status CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Delete($/;"	f	class:cuckoofilter::CuckooFilter	typeref:typename:Status
DeleteTagFromBucket	src/packedtable.h	/^  bool DeleteTagFromBucket(const size_t i, const uint32_t tag) {$/;"	f	class:cuckoofilter::PackedTable	typeref:typename:bool
DeleteTagFromBucket	src/singletable.h	/^  inline bool DeleteTagFromBucket(const size_t i, const uint32_t tag) {$/;"	f	class:cuckoofilter::SingleTable	typeref:typename:bool
EVP_MD_CTX_free	src/hashutil.cc	/^void EVP_MD_CTX_free(EVP_MD_CTX *ctx)$/;"	f	namespace:cuckoofilter	typeref:typename:void
EVP_MD_CTX_new	src/hashutil.cc	/^EVP_MD_CTX *EVP_MD_CTX_new(void)$/;"	f	namespace:cuckoofilter	typeref:typename:EVP_MD_CTX *
FPR_SAMPLE_SIZE	benchmarks/conext-table3.cc	/^const size_t FPR_SAMPLE_SIZE = 1000 * 1000;$/;"	v	typeref:typename:const size_t
FilterAPI	benchmarks/bulk-insert-and-query.cc	/^struct FilterAPI {};$/;"	s	file:
Find	src/simd-block.h	/^SimdBlockFilter<HashFamily>::Find(const uint64_t key) const noexcept {$/;"	f	class:SimdBlockFilter	typeref:typename:[[gnu::always_inline]]bool
FindTagInBucket	src/packedtable.h	/^  bool FindTagInBucket(const size_t i, const uint32_t tag) const {$/;"	f	class:cuckoofilter::PackedTable	typeref:typename:bool
FindTagInBucket	src/singletable.h	/^  inline bool FindTagInBucket(const size_t i, const uint32_t tag) const {$/;"	f	class:cuckoofilter::SingleTable	typeref:typename:bool
FindTagInBuckets	src/packedtable.h	/^  bool FindTagInBuckets(const size_t i1, const size_t i2,$/;"	f	class:cuckoofilter::PackedTable	typeref:typename:bool
FindTagInBuckets	src/singletable.h	/^  inline bool FindTagInBuckets(const size_t i1, const size_t i2,$/;"	f	class:cuckoofilter::SingleTable	typeref:typename:bool
GenerateIndexTagHash	src/cuckoofilter.h	/^  inline void GenerateIndexTagHash(const ItemType& item, size_t* index,$/;"	f	class:cuckoofilter::CuckooFilter	typeref:typename:void
GenerateRandom64	benchmarks/random.h	/^::std::vector<::std::uint64_t> GenerateRandom64(::std::size_t count) {$/;"	f	typeref:typename:::std::vector<::std::uint64_t>
HASH_LITTLE_ENDIAN	src/hashutil.cc	/^#define HASH_LITTLE_ENDIAN /;"	d	file:
HEADERS	Makefile	/^HEADERS = $(wildcard src\/*.h)$/;"	m
HEADERS	benchmarks/Makefile	/^HEADERS = $(wildcard ..\/src\/*.h) *.h$/;"	m
HashUtil	src/hashutil.h	/^class HashUtil {$/;"	c	namespace:cuckoofilter
IndexHash	src/cuckoofilter.h	/^  inline size_t IndexHash(uint32_t hv) const {$/;"	f	class:cuckoofilter::CuckooFilter	typeref:typename:size_t
Info	src/cuckoofilter.h	/^std::string CuckooFilter<ItemType, bits_per_item, TableType, HashFamily>::Info() const {$/;"	f	class:cuckoofilter::CuckooFilter	typeref:typename:std::string
Info	src/packedtable.h	/^  std::string Info() const {$/;"	f	class:cuckoofilter::PackedTable	typeref:typename:std::string
Info	src/singletable.h	/^  std::string Info() const {$/;"	f	class:cuckoofilter::SingleTable	typeref:typename:std::string
InsertTagToBucket	src/packedtable.h	/^  bool InsertTagToBucket(const size_t i, const uint32_t tag, const bool kickout,$/;"	f	class:cuckoofilter::PackedTable	typeref:typename:bool
InsertTagToBucket	src/singletable.h	/^  inline bool InsertTagToBucket(const size_t i, const uint32_t tag,$/;"	f	class:cuckoofilter::SingleTable	typeref:typename:bool
Install	README.md	/^Install$/;"	s
LIBOBJECTS	Makefile	/^LIBOBJECTS = \\$/;"	m
LOG_BUCKET_BYTE_SIZE	src/simd-block.h	/^  static constexpr int LOG_BUCKET_BYTE_SIZE = 5;$/;"	m	class:SimdBlockFilter	typeref:typename:int
LoadFactor	src/cuckoofilter.h	/^  double LoadFactor() const { return 1.0 * Size() \/ table_->SizeInTags(); }$/;"	f	class:cuckoofilter::CuckooFilter	typeref:typename:double
MD5Hash	src/hashutil.cc	/^std::string HashUtil::MD5Hash(const char *inbuf, size_t in_length) {$/;"	f	class:cuckoofilter::HashUtil	typeref:typename:std::string
MakeMask	src/simd-block.h	/^SimdBlockFilter<HashFamily>::MakeMask(const uint32_t hash) noexcept {$/;"	f	class:SimdBlockFilter	typeref:typename:[[gnu::always_inline]]__m256i
Metrics	benchmarks/conext-table3.cc	/^struct Metrics {$/;"	s	file:
MixIn	benchmarks/random.h	/^::std::vector<T> MixIn(const T* x_begin, const T* x_end, const T* y_begin, const T* y_end,$/;"	f	typeref:typename:::std::vector<T>
MurmurHash	src/hashutil.cc	/^uint32_t HashUtil::MurmurHash(const std::string &s, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil	typeref:typename:uint32_t
MurmurHash	src/hashutil.cc	/^uint32_t HashUtil::MurmurHash(const void *buf, size_t len, uint32_t seed) {$/;"	f	class:cuckoofilter::HashUtil	typeref:typename:uint32_t
N_ENTS	src/permencoding.h	/^  static const size_t N_ENTS = 3876;$/;"	m	class:cuckoofilter::PermEncoding	typeref:typename:const size_t
NotEnoughSpace	src/cuckoofilter.h	/^  NotEnoughSpace = 2,$/;"	e	enum:cuckoofilter::Status
NotFound	src/cuckoofilter.h	/^  NotFound = 1,$/;"	e	enum:cuckoofilter::Status
NotSupported	src/cuckoofilter.h	/^  NotSupported = 3,$/;"	e	enum:cuckoofilter::Status
NowNanos	benchmarks/timing.h	/^::std::uint64_t NowNanos() {$/;"	f	typeref:typename:::std::uint64_t
NullHash	src/hashutil.cc	/^uint32_t HashUtil::NullHash(const void *buf, size_t length,$/;"	f	class:cuckoofilter::HashUtil	typeref:typename:uint32_t
NumBuckets	src/packedtable.h	/^  size_t NumBuckets() const {$/;"	f	class:cuckoofilter::PackedTable	typeref:typename:size_t
NumBuckets	src/singletable.h	/^  size_t NumBuckets() const {$/;"	f	class:cuckoofilter::SingleTable	typeref:typename:size_t
NumTagsInBucket	src/singletable.h	/^  inline size_t NumTagsInBucket(const size_t i) const {$/;"	f	class:cuckoofilter::SingleTable	typeref:typename:size_t
OPENSSL_zalloc	src/hashutil.cc	/^static void *OPENSSL_zalloc(size_t num)$/;"	f	namespace:cuckoofilter	typeref:typename:void *	file:
OPT	Makefile	/^OPT = -g -ggdb$/;"	m
OPT	benchmarks/Makefile	/^OPT = -O3 -DNDEBUG$/;"	m
Ok	src/cuckoofilter.h	/^  Ok = 0,$/;"	e	enum:cuckoofilter::Status
Overview	README.md	/^Overview$/;"	s
PREFIX	Makefile	/^PREFIX=\/usr\/local$/;"	m
PackedTable	src/packedtable.h	/^  explicit PackedTable(size_t num) : num_buckets_(num) {$/;"	f	class:cuckoofilter::PackedTable
PackedTable	src/packedtable.h	/^class PackedTable {$/;"	c	namespace:cuckoofilter
PermEncoding	src/permencoding.h	/^  PermEncoding() {$/;"	f	class:cuckoofilter::PermEncoding
PermEncoding	src/permencoding.h	/^class PermEncoding {$/;"	c	namespace:cuckoofilter
PrintBucket	src/packedtable.h	/^  void PrintBucket(const size_t i) const {$/;"	f	class:cuckoofilter::PackedTable	typeref:typename:void
PrintTags	src/packedtable.h	/^  void PrintTags(uint32_t tags[4]) const {$/;"	f	class:cuckoofilter::PackedTable	typeref:typename:void
PrintUtil	src/printutil.h	/^class PrintUtil {$/;"	c	namespace:cuckoofilter
ReadBucket	src/packedtable.h	/^  inline void ReadBucket(const size_t i, uint32_t tags[4]) const {$/;"	f	class:cuckoofilter::PackedTable	typeref:typename:void
ReadTag	src/singletable.h	/^  inline uint32_t ReadTag(const size_t i, const size_t j) const {$/;"	f	class:cuckoofilter::SingleTable	typeref:typename:uint32_t
Repository structure	README.md	/^Repository structure$/;"	s
SAMPLE_SIZE	benchmarks/bulk-insert-and-query.cc	/^const size_t SAMPLE_SIZE = 1000 * 1000;$/;"	v	typeref:typename:const size_t
SAMPLE_SIZE	benchmarks/conext-figure5.cc	/^const size_t SAMPLE_SIZE = 1000 * 1000;$/;"	v	typeref:typename:const size_t
SHA1Hash	src/hashutil.cc	/^std::string HashUtil::SHA1Hash(const char *inbuf, size_t in_length) {$/;"	f	class:cuckoofilter::HashUtil	typeref:typename:std::string
SRC	benchmarks/Makefile	/^SRC = ..\/src\/hashutil.cc$/;"	m
SimdBlockFilter	src/simd-block.h	/^  SimdBlockFilter(SimdBlockFilter&& that)$/;"	f	class:SimdBlockFilter
SimdBlockFilter	src/simd-block.h	/^SimdBlockFilter<HashFamily>::SimdBlockFilter(const int log_heap_space)$/;"	f	class:SimdBlockFilter
SimdBlockFilter	src/simd-block.h	/^class SimdBlockFilter {$/;"	c
SimpleTabulation	src/hashutil.h	/^  SimpleTabulation() {$/;"	f	class:cuckoofilter::SimpleTabulation
SimpleTabulation	src/hashutil.h	/^class SimpleTabulation {$/;"	c	namespace:cuckoofilter
SingleTable	src/singletable.h	/^  explicit SingleTable(const size_t num) : num_buckets_(num) {$/;"	f	class:cuckoofilter::SingleTable
SingleTable	src/singletable.h	/^class SingleTable {$/;"	c	namespace:cuckoofilter
Size	src/cuckoofilter.h	/^  size_t Size() const { return num_items_; }$/;"	f	class:cuckoofilter::CuckooFilter	typeref:typename:size_t
SizeInBytes	src/cuckoofilter.h	/^  size_t SizeInBytes() const { return table_->SizeInBytes(); }$/;"	f	class:cuckoofilter::CuckooFilter	typeref:typename:size_t
SizeInBytes	src/packedtable.h	/^  size_t SizeInBytes() const { $/;"	f	class:cuckoofilter::PackedTable	typeref:typename:size_t
SizeInBytes	src/simd-block.h	/^  uint64_t SizeInBytes() const { return sizeof(Bucket) * (1ull << log_num_buckets_); }$/;"	f	class:SimdBlockFilter	typeref:typename:uint64_t
SizeInBytes	src/singletable.h	/^  size_t SizeInBytes() const { $/;"	f	class:cuckoofilter::SingleTable	typeref:typename:size_t
SizeInTags	src/packedtable.h	/^  size_t SizeInTags() const { $/;"	f	class:cuckoofilter::PackedTable	typeref:typename:size_t
SizeInTags	src/singletable.h	/^  size_t SizeInTags() const { $/;"	f	class:cuckoofilter::SingleTable	typeref:typename:size_t
SortPair	src/packedtable.h	/^  inline void SortPair(uint32_t &a, uint32_t &b) {$/;"	f	class:cuckoofilter::PackedTable	typeref:typename:void
SortTags	src/packedtable.h	/^  inline void SortTags(uint32_t *tags) {$/;"	f	class:cuckoofilter::PackedTable	typeref:typename:void
Statistics	benchmarks/bulk-insert-and-query.cc	/^struct Statistics {$/;"	s	file:
StatisticsTableHeader	benchmarks/bulk-insert-and-query.cc	/^string StatisticsTableHeader(int type_width, int find_percent_count) {$/;"	f	typeref:typename:string
Status	src/cuckoofilter.h	/^enum Status {$/;"	g	namespace:cuckoofilter
SuperFastHash	src/hashutil.cc	/^uint32_t HashUtil::SuperFastHash(const std::string &s) {$/;"	f	class:cuckoofilter::HashUtil	typeref:typename:uint32_t
SuperFastHash	src/hashutil.cc	/^uint32_t HashUtil::SuperFastHash(const void *buf, size_t len) {$/;"	f	class:cuckoofilter::HashUtil	typeref:typename:uint32_t
TEST	Makefile	/^TEST = test$/;"	m
TagHash	src/cuckoofilter.h	/^  inline uint32_t TagHash(uint32_t hv) const {$/;"	f	class:cuckoofilter::CuckooFilter	typeref:typename:uint32_t
TwoIndependentMultiplyShift	src/hashutil.h	/^  TwoIndependentMultiplyShift() {$/;"	f	class:cuckoofilter::TwoIndependentMultiplyShift
TwoIndependentMultiplyShift	src/hashutil.h	/^class TwoIndependentMultiplyShift {$/;"	c	namespace:cuckoofilter
VictimCache	src/cuckoofilter.h	/^  } VictimCache;$/;"	t	class:cuckoofilter::CuckooFilter	typeref:struct:cuckoofilter::CuckooFilter::__anon422dcf5c0108
WriteBucket	src/packedtable.h	/^  inline void WriteBucket(const size_t i, uint32_t tags[4], bool sort = true) {$/;"	f	class:cuckoofilter::PackedTable	typeref:typename:void
WriteTag	src/singletable.h	/^  inline void WriteTag(const size_t i, const size_t j, const uint32_t t) {$/;"	f	class:cuckoofilter::SingleTable	typeref:typename:void
__anon422dcf5c0108	src/cuckoofilter.h	/^  typedef struct {$/;"	s	class:cuckoofilter::CuckooFilter
__anon4c301e12010a	src/hashutil.cc	/^  union {$/;"	u	function:cuckoofilter::HashUtil::BobHash	file:
__anon4c301e12020a	src/hashutil.cc	/^  union {$/;"	u	function:cuckoofilter::HashUtil::BobHash	file:
__anon7035ca690102	benchmarks/random.h	/^  auto genrand = [&random]() {$/;"	f	function:GenerateRandom64	file:
__anon7035ca690202	benchmarks/random.h	/^  auto genrand = [&random, y_size]() {$/;"	f	function:MixIn	file:
add_	src/hashutil.h	/^  unsigned __int128 multiply_, add_;$/;"	m	class:cuckoofilter::TwoIndependentMultiplyShift	typeref:typename:unsigned __int128
add_count	benchmarks/conext-table3.cc	/^  double add_count;  \/\/ # of items (million)$/;"	m	struct:Metrics	typeref:typename:double	file:
adds_per_nano	benchmarks/bulk-insert-and-query.cc	/^  double adds_per_nano;$/;"	m	struct:Statistics	typeref:typename:double	file:
all	Makefile	/^all: $(TEST)$/;"	t
all	benchmarks/Makefile	/^all: $(BINS)$/;"	t
bits_	src/singletable.h	/^    char bits_[kBytesPerBucket];$/;"	m	struct:cuckoofilter::SingleTable::Bucket	typeref:typename:char[]
bits_per_item	benchmarks/bulk-insert-and-query.cc	/^  double bits_per_item;$/;"	m	struct:Statistics	typeref:typename:double	file:
buckets_	src/packedtable.h	/^  char *buckets_;$/;"	m	class:cuckoofilter::PackedTable	typeref:typename:char *
buckets_	src/singletable.h	/^  Bucket *buckets_;$/;"	m	class:cuckoofilter::SingleTable	typeref:typename:Bucket *
bytes_to_hex	src/printutil.cc	/^std::string PrintUtil::bytes_to_hex(const char *data, size_t len) {$/;"	f	class:cuckoofilter::PrintUtil	typeref:typename:std::string
bytes_to_hex	src/printutil.cc	/^std::string PrintUtil::bytes_to_hex(const std::string &s) {$/;"	f	class:cuckoofilter::PrintUtil	typeref:typename:std::string
bytes_to_hex	src/printutil.h	/^  static std::string bytes_to_hex(const char *data, size_t len) {$/;"	f	class:cuckoofilter::PrintUtil	typeref:typename:std::string
bytes_to_hex	src/printutil.h	/^  static std::string bytes_to_hex(const std::string &s) {$/;"	f	class:cuckoofilter::PrintUtil	typeref:typename:std::string
clean	Makefile	/^clean:$/;"	t
clean	benchmarks/Makefile	/^clean:$/;"	t
cuckoofilter	src/bitsutil.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	src/cuckoofilter.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	src/debug.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	src/hashutil.cc	/^namespace cuckoofilter {$/;"	n	file:
cuckoofilter	src/hashutil.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	src/packedtable.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	src/permencoding.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	src/printutil.cc	/^namespace cuckoofilter {$/;"	n	file:
cuckoofilter	src/printutil.h	/^namespace cuckoofilter {$/;"	n
cuckoofilter	src/singletable.h	/^namespace cuckoofilter {$/;"	n
debug_level	src/debug.h	/^#define debug_level /;"	d
dec_table	src/permencoding.h	/^  uint16_t dec_table[N_ENTS];$/;"	m	class:cuckoofilter::PermEncoding	typeref:typename:uint16_t[]
decode	src/permencoding.h	/^  inline void decode(const uint16_t codeword, uint8_t lowbits[4]) const {$/;"	f	class:cuckoofilter::PermEncoding	typeref:typename:void
directory_	src/simd-block.h	/^  Bucket* directory_;$/;"	m	class:SimdBlockFilter	typeref:typename:Bucket *
directory_mask_	src/simd-block.h	/^  const uint32_t directory_mask_;$/;"	m	class:SimdBlockFilter	typeref:typename:const uint32_t
enc_table	src/permencoding.h	/^  uint16_t enc_table[1 << 16];$/;"	m	class:cuckoofilter::PermEncoding	typeref:typename:uint16_t[]
encode	src/permencoding.h	/^  inline uint16_t encode(const uint8_t lowbits[4]) const {$/;"	f	class:cuckoofilter::PermEncoding	typeref:typename:uint16_t
false_positive_probabilty	benchmarks/bulk-insert-and-query.cc	/^  double false_positive_probabilty;$/;"	m	struct:Statistics	typeref:typename:double	file:
final	src/hashutil.cc	/^#define final(/;"	d	file:
finds_per_nano	benchmarks/bulk-insert-and-query.cc	/^  map<int, double> finds_per_nano; \/\/ The key is the percent of queries that were expected$/;"	m	struct:Statistics	typeref:typename:map<int,double>	file:
fpr	benchmarks/conext-table3.cc	/^  double fpr;        \/\/ false positive rate (%)$/;"	m	struct:Metrics	typeref:typename:double	file:
gen_tables	src/permencoding.h	/^  void gen_tables(int base, int k, uint8_t dst[4], uint16_t &idx) {$/;"	f	class:cuckoofilter::PermEncoding	typeref:typename:void
get16bits	src/hashutil.cc	/^#define get16bits(/;"	d	file:
hasher_	src/cuckoofilter.h	/^  HashFamily hasher_;$/;"	m	class:cuckoofilter::CuckooFilter	typeref:typename:HashFamily
hasher_	src/simd-block.h	/^  HashFamily hasher_;$/;"	m	class:SimdBlockFilter	typeref:typename:HashFamily
hasvalue12	src/bitsutil.h	/^#define hasvalue12(/;"	d
hasvalue16	src/bitsutil.h	/^#define hasvalue16(/;"	d
hasvalue4	src/bitsutil.h	/^#define hasvalue4(/;"	d
hasvalue8	src/bitsutil.h	/^#define hasvalue8(/;"	d
haszero12	src/bitsutil.h	/^#define haszero12(/;"	d
haszero16	src/bitsutil.h	/^#define haszero16(/;"	d
haszero4	src/bitsutil.h	/^#define haszero4(/;"	d
haszero8	src/bitsutil.h	/^#define haszero8(/;"	d
i	src/hashutil.cc	/^    size_t i;$/;"	m	union:cuckoofilter::HashUtil::BobHash::__anon4c301e12010a	typeref:typename:size_t	file:
i	src/hashutil.cc	/^    size_t i;$/;"	m	union:cuckoofilter::HashUtil::BobHash::__anon4c301e12020a	typeref:typename:size_t	file:
index	src/cuckoofilter.h	/^    size_t index;$/;"	m	struct:cuckoofilter::CuckooFilter::__anon422dcf5c0108	typeref:typename:size_t
install	Makefile	/^install: $(ALIB)$/;"	t
kBitsPerBucket	src/packedtable.h	/^  static const size_t kBitsPerBucket = (3 + kDirBitsPerTag) * 4;$/;"	m	class:cuckoofilter::PackedTable	typeref:typename:const size_t
kBytesPerBucket	src/packedtable.h	/^  static const size_t kBytesPerBucket = (kBitsPerBucket + 7) >> 3;$/;"	m	class:cuckoofilter::PackedTable	typeref:typename:const size_t
kBytesPerBucket	src/singletable.h	/^  static const size_t kBytesPerBucket =$/;"	m	class:cuckoofilter::SingleTable	typeref:typename:const size_t
kDirBitsMask	src/packedtable.h	/^  static const uint32_t kDirBitsMask = ((1ULL << kDirBitsPerTag) - 1) << 4;$/;"	m	class:cuckoofilter::PackedTable	typeref:typename:const uint32_t
kDirBitsPerTag	src/packedtable.h	/^  static const size_t kDirBitsPerTag = bits_per_tag - 4;$/;"	m	class:cuckoofilter::PackedTable	typeref:typename:const size_t
kMaxCuckooCount	src/cuckoofilter.h	/^const size_t kMaxCuckooCount = 500;$/;"	v	namespace:cuckoofilter	typeref:typename:const size_t
kPaddingBuckets	src/singletable.h	/^  static const size_t kPaddingBuckets =$/;"	m	class:cuckoofilter::SingleTable	typeref:typename:const size_t
kTagMask	src/singletable.h	/^  static const uint32_t kTagMask = (1ULL << bits_per_tag) - 1;$/;"	m	class:cuckoofilter::SingleTable	typeref:typename:const uint32_t
kTagsPerBucket	src/singletable.h	/^  static const size_t kTagsPerBucket = 4;$/;"	m	class:cuckoofilter::SingleTable	typeref:typename:const size_t
len_	src/packedtable.h	/^  size_t len_;$/;"	m	class:cuckoofilter::PackedTable	typeref:typename:size_t
log_num_buckets_	src/simd-block.h	/^  const int log_num_buckets_;$/;"	m	class:SimdBlockFilter	typeref:typename:const int
main	benchmarks/conext-figure5.cc	/^int main() {$/;"	f	typeref:typename:int
main	benchmarks/conext-table3.cc	/^int main() {$/;"	f	typeref:typename:int
main	example/test.cc	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
mix	src/hashutil.cc	/^#define mix(/;"	d	file:
multiply_	src/hashutil.h	/^  unsigned __int128 multiply_, add_;$/;"	m	class:cuckoofilter::TwoIndependentMultiplyShift	typeref:typename:unsigned __int128
num_buckets_	src/packedtable.h	/^  size_t num_buckets_;$/;"	m	class:cuckoofilter::PackedTable	typeref:typename:size_t
num_buckets_	src/singletable.h	/^  size_t num_buckets_;$/;"	m	class:cuckoofilter::SingleTable	typeref:typename:size_t
num_items_	src/cuckoofilter.h	/^  size_t num_items_;$/;"	m	class:cuckoofilter::CuckooFilter	typeref:typename:size_t
operator ()	src/hashutil.h	/^  uint64_t operator()(uint64_t key) const {$/;"	f	class:cuckoofilter::SimpleTabulation	typeref:typename:uint64_t
operator ()	src/hashutil.h	/^  uint64_t operator()(uint64_t key) const {$/;"	f	class:cuckoofilter::TwoIndependentMultiplyShift	typeref:typename:uint64_t
operator <<	benchmarks/bulk-insert-and-query.cc	/^basic_ostream<CharT, Traits>& operator<<($/;"	f	typeref:typename:basic_ostream<CharT,Traits> &
pack	src/permencoding.h	/^  inline uint16_t pack(const uint8_t in[4]) const {$/;"	f	class:cuckoofilter::PermEncoding	typeref:typename:uint16_t
perm_	src/packedtable.h	/^  PermEncoding perm_;$/;"	m	class:cuckoofilter::PackedTable	typeref:typename:PermEncoding
ptr	src/hashutil.cc	/^    const void *ptr;$/;"	m	union:cuckoofilter::HashUtil::BobHash::__anon4c301e12010a	typeref:typename:const void *	file:
ptr	src/hashutil.cc	/^    const void *ptr;$/;"	m	union:cuckoofilter::HashUtil::BobHash::__anon4c301e12020a	typeref:typename:const void *	file:
rot	src/hashutil.cc	/^#define rot(/;"	d	file:
space	benchmarks/conext-table3.cc	/^  double space;      \/\/ bits per item$/;"	m	struct:Metrics	typeref:typename:double	file:
speed	benchmarks/conext-table3.cc	/^  double speed;      \/\/ const. speed (million keys\/sec)$/;"	m	struct:Metrics	typeref:typename:double	file:
table_	src/cuckoofilter.h	/^  TableType<bits_per_item> *table_;$/;"	m	class:cuckoofilter::CuckooFilter	typeref:typename:TableType<bits_per_item> *
tables_	src/hashutil.h	/^  uint64_t tables_[sizeof(uint64_t)][1 << CHAR_BIT];$/;"	m	class:cuckoofilter::SimpleTabulation	typeref:typename:uint64_t[][]
tag	src/cuckoofilter.h	/^    uint32_t tag;$/;"	m	struct:cuckoofilter::CuckooFilter::__anon422dcf5c0108	typeref:typename:uint32_t
test	Makefile	/^test: example\/test.o $(LIBOBJECTS) $/;"	t
uint32_t	src/simd-block.h	/^using uint32_t = ::std::uint32_t;$/;"	t	typeref:typename:::std::uint32_t
uint64_t	src/simd-block.h	/^using uint64_t = ::std::uint64_t;$/;"	t	typeref:typename:::std::uint64_t
uninstall	Makefile	/^uninstall:$/;"	t
unpack	src/permencoding.h	/^  inline void unpack(uint16_t in, uint8_t out[4]) const {$/;"	f	class:cuckoofilter::PermEncoding	typeref:typename:void
upperpower2	src/bitsutil.h	/^inline uint64_t upperpower2(uint64_t x) {$/;"	f	namespace:cuckoofilter	typeref:typename:uint64_t
used	src/cuckoofilter.h	/^    bool used;$/;"	m	struct:cuckoofilter::CuckooFilter::__anon422dcf5c0108	typeref:typename:bool
victim_	src/cuckoofilter.h	/^  VictimCache victim_;$/;"	m	class:cuckoofilter::CuckooFilter	typeref:typename:VictimCache
~CuckooFilter	src/cuckoofilter.h	/^  ~CuckooFilter() { delete table_; }$/;"	f	class:cuckoofilter::CuckooFilter
~PackedTable	src/packedtable.h	/^  ~PackedTable() { $/;"	f	class:cuckoofilter::PackedTable
~PermEncoding	src/permencoding.h	/^  ~PermEncoding() {}$/;"	f	class:cuckoofilter::PermEncoding
~SimdBlockFilter	src/simd-block.h	/^SimdBlockFilter<HashFamily>::~SimdBlockFilter() noexcept {$/;"	f	class:SimdBlockFilter
~SingleTable	src/singletable.h	/^  ~SingleTable() { $/;"	f	class:cuckoofilter::SingleTable
